version: '3.0'

services:

  nginx:
    image: nginx:latest
    container_name: nginx
    ports:
      - "80:80"
    volumes:
      - ./nginx/default.conf:/etc/nginx/conf.d/default.conf
    depends_on:
      - user-service
      - get-subtitle-service
      - get-meaning-service
      #- get-audio-service
      - word-registry-service
      - word-recomendation-service
      - db1
      - api_mongo
      - consumer
      - producer
      - rabbitmq
      - get-related-video-service
      - word-db
    networks:
      - nginx_network
  
  user-service:
    build: ./userService
    restart: always
    tty: true
    ports:
      - 5000:5000
    environment:
      TZ: Asia/Tokyo
    volumes:
      - "./userService:/projects"
    command: python /projects/app.py
    networks:
      - nginx_network

  get-subtitle-service:
    build: ./getSubtitleService
    restart: always
    tty: true
    ports:
      - 5001:5001
    environment:
      TZ: Asia/Tokyo
    volumes:
      - "./getSubtitleService/:/projects"
    command: python /projects/app.py
    networks:
      - nginx_network

  get-meaning-service:
    build: ./getMeaningService
    restart: always
    tty: true
    ports:
      - 5002:5002
    environment:
      TZ: Asia/Tokyo
    volumes:
      - "./getMeaningService:/projects"
    command: python /projects/app.py
    networks:
      - nginx_network
  
  # get-audio-service:
  #   build: ./getAudioService
  #   restart: always
  #   tty: true
  #   ports:
  #     - 5003:5003
  #   environment:
  #     TZ: Asia/Tokyo
  #   volumes:
  #     - "./getAudioService:/projects"
  #   command: python /projects/app.py
  #   networks:
  #     - nginx_network
  
  word-registry-service:
    build: ./wordRegistryService
    restart: always
    tty: true
    ports:
      - 5004:5004
    environment:
      TZ: Asia/Tokyo
    volumes:
      - "./wordRegistryService:/projects"
    command: python /projects/app.py
    networks:
      - nginx_network
  
  producer:
    container_name: producer
    build: ./producer
    restart: always
    tty: true
    ports:
      - 8000:8000
    networks:
      - nginx_network

  consumer:
    container_name: consumer
    build: ./consumer
    ports:
      - "5005:5005"
    tty: true
    environment:
      TZ: Asia/Tokyo
    volumes:
      - "./consumer:/projects"
    command: python /projects/consumer.py
    networks:
      - nginx_network
  
  word-recomendation-service:
    build: ./recomendWordService
    ports:
      - "5006:5006"
    tty: true
    environment:
      TZ: Asia/Tokyo
    volumes:
      - "./recomendWordService:/projects"
    command: python /projects/app.py
    networks:
      - nginx_network
  
  get-related-video-service:
    build: ./getRelatedVideos
    ports:
      - "5007:5007"
    tty: true
    environment:
      TZ: Asia/Tokyo
    volumes:
      - "./getRelatedVideos:/projects"
    command: python /projects/app.py
    networks:
      - nginx_network  
  
    
  rabbitmq:
    container_name: rabbitmq
    restart: always
    tty: true
    image: rabbitmq:3.8.9-management-alpine
    ports:
      - '5672:5672'
      - '15672:15672'
    networks:
      - nginx_network
    
  api_mongo:
    image: mongo:3.6.5
    restart: always
    ports:
      - 27018:27017
    volumes:
      - /var/lib/mongo_data:/data/db
      - ./configdb:/data/configdb
    environment:
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD: password
    networks:
      - nginx_network
  
  db1:
    image: mysql:5.7
    ports:
      - "3306:3306"
    volumes:
      # 初期データを投入するSQLが格納されているdir
      - ./db1/mysql_init:/docker-entrypoint-initdb.d
      # 永続化するときにマウントするdir
      - ./db1/mysql_data:/var/lib/mysql
      - ./db1/my.cnf:/etc/mysql/conf.d/my.cnf
    environment:
      MYSQL_ROOT_PASSWORD: ecc
      MYSQL_USER: test
      MYSQL_PASSWORD: test
      MYSQL_DATABASE: test
      TZ: "Asia/Tokyo"
    command: mysqld --character-set-server=utf8 --collation-server=utf8_unicode_ci
    networks:
      - nginx_network
  
  word-db:
    image: mysql:5.7
    ports:
      - "3307:3306"
    volumes:
      # 初期データを投入するSQLが格納されているdir
      - ./wordDB/mysql_init:/docker-entrypoint-initdb.d
      # 永続化するときにマウントするdir
      - ./wordDB/mysql_data:/var/lib/mysql
      - ./wordDB/my.cnf:/etc/mysql/conf.d/my.cnf
    environment:
      MYSQL_ROOT_PASSWORD: ecc
      MYSQL_USER: test
      MYSQL_PASSWORD: test
      MYSQL_DATABASE: test
      TZ: "Asia/Tokyo"
    command: mysqld --character-set-server=utf8 --collation-server=utf8_unicode_ci
    networks:
      - nginx_network

networks:
  nginx_network:
    driver: bridge


  
